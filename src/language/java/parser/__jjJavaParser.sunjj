options {
  BUILD_PARSER = false;
  STATIC = false;
}

PARSER_BEGIN(__jjJavaParser)

class __jjJavaParser {
}

PARSER_END(__jjJavaParser)

void __jjdummy() : {} {{}}

SKIP: {
" "
}
SKIP: {
"\t"
}
SKIP: {
"\n"
}
SKIP: {
"\r"
}
SKIP: {
"\f"
}
MORE: {
"//" : IN_SINGLE_LINE_COMMENT
}
MORE: {
<"/**" ~["/"]> { backup(1); } : IN_FORMAL_COMMENT
}
MORE: {
"/*" : IN_MULTI_LINE_COMMENT
}
<IN_SINGLE_LINE_COMMENT>SPECIAL_TOKEN: {
<SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}
<IN_FORMAL_COMMENT>SPECIAL_TOKEN: {
<FORMAL_COMMENT: "*/" > : DEFAULT
}
<IN_MULTI_LINE_COMMENT>SPECIAL_TOKEN: {
<MULTI_LINE_COMMENT: "*/" > : DEFAULT
}
<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>MORE: {
< ~[] >
}
TOKEN: {
< ABSTRACT: "abstract" >
}
TOKEN: {
< BOOLEAN: "boolean" >
}
TOKEN: {
< BREAK: "break" >
}
TOKEN: {
< BYTE: "byte" >
}
TOKEN: {
< CASE: "case" >
}
TOKEN: {
< CATCH: "catch" >
}
TOKEN: {
< CHAR: "char" >
}
TOKEN: {
< CLASS: "class" >
}
TOKEN: {
< CONST: "const" >
}
TOKEN: {
< CONTINUE: "continue" >
}
TOKEN: {
< _DEFAULT: "default" >
}
TOKEN: {
< DO: "do" >
}
TOKEN: {
< DOUBLE: "double" >
}
TOKEN: {
< ELSE: "else" >
}
TOKEN: {
< EXTENDS: "extends" >
}
TOKEN: {
< FALSE: "false" >
}
TOKEN: {
< FINAL: "final" >
}
TOKEN: {
< FINALLY: "finally" >
}
TOKEN: {
< FLOAT: "float" >
}
TOKEN: {
< FOR: "for" >
}
TOKEN: {
< GOTO: "goto" >
}
TOKEN: {
< IF: "if" >
}
TOKEN: {
< IMPLEMENTS: "implements" >
}
TOKEN: {
< IMPORT: "import" >
}
TOKEN: {
< INSTANCEOF: "instanceof" >
}
TOKEN: {
< INT: "int" >
}
TOKEN: {
< INTERFACE: "interface" >
}
TOKEN: {
< LONG: "long" >
}
TOKEN: {
< NATIVE: "native" >
}
TOKEN: {
< NEW: "new" >
}
TOKEN: {
< NULL: "null" >
}
TOKEN: {
< PACKAGE: "package">
}
TOKEN: {
< PRIVATE: "private" >
}
TOKEN: {
< PROTECTED: "protected" >
}
TOKEN: {
< PUBLIC: "public" >
}
TOKEN: {
< RETURN: "return" >
}
TOKEN: {
< SHORT: "short" >
}
TOKEN: {
< STATIC: "static" >
}
TOKEN: {
< SUPER: "super" >
}
TOKEN: {
< SWITCH: "switch" >
}
TOKEN: {
< SYNCHRONIZED: "synchronized" >
}
TOKEN: {
< THIS: "this" >
}
TOKEN: {
< THROW: "throw" >
}
TOKEN: {
< THROWS: "throws" >
}
TOKEN: {
< TRANSIENT: "transient" >
}
TOKEN: {
< TRUE: "true" >
}
TOKEN: {
< TRY: "try" >
}
TOKEN: {
< VOID: "void" >
}
TOKEN: {
< VOLATILE: "volatile" >
}
TOKEN: {
< WHILE: "while" >
}
TOKEN: {
< INTEGER_LITERAL:
          <DECIMAL_LITERAL> (["l","L"])?
        | <HEX_LITERAL> (["l","L"])?
        | <OCTAL_LITERAL> (["l","L"])?
    >
}
TOKEN: {
< #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
}
TOKEN: {
< #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
}
TOKEN: {
< #OCTAL_LITERAL: "0" (["0"-"7"])* >
}
TOKEN: {
< FLOATING_POINT_LITERAL:
          (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
        | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
        | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
        | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
    >
}
TOKEN: {
< #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}
TOKEN: {
< CHARACTER_LITERAL:
        "'"
        (   (~["\'","\\","\n","\r"])
          | ("\\"
              ( ["n","t","b","r","f","\\","\'","\""]
              | ["0"-"7"] ( ["0"-"7"] )?
              | ["0"-"3"] ["0"-"7"] ["0"-"7"]
              )
            )
        )
        "'"
    >
}
TOKEN: {
< STRING_LITERAL:
        "\""
        (   (~["\"","\\","\n","\r"])
          | ("\\"
              ( ["n","t","b","r","f","\\","\'","\""]
              | ["0"-"7"] ( ["0"-"7"] )?
              | ["0"-"3"] ["0"-"7"] ["0"-"7"]
              )
            )
        )*
        "\""
    >
}
TOKEN: {
< IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
}
TOKEN: {
< #LETTER:
        [
         "$",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u00ff",
         "\u0100"-"\u1fff",
         "\u3040"-"\u318f",
         "\u3300"-"\u337f",
         "\u3400"-"\u3d2d",
         "\u4e00"-"\u9fff",
         "\uf900"-"\ufaff"
        ]
    >
}
TOKEN: {
< #DIGIT:
        [
         "0"-"9",
         "\u0660"-"\u0669",
         "\u06f0"-"\u06f9",
         "\u0966"-"\u096f",
         "\u09e6"-"\u09ef",
         "\u0a66"-"\u0a6f",
         "\u0ae6"-"\u0aef",
         "\u0b66"-"\u0b6f",
         "\u0be7"-"\u0bef",
         "\u0c66"-"\u0c6f",
         "\u0ce6"-"\u0cef",
         "\u0d66"-"\u0d6f",
         "\u0e50"-"\u0e59",
         "\u0ed0"-"\u0ed9",
         "\u1040"-"\u1049"
        ]
    >
}
TOKEN: {
< LPAREN: "(" >
}
TOKEN: {
< RPAREN: ")" >
}
TOKEN: {
< LBRACE: "{" >
}
TOKEN: {
< RBRACE: "}" >
}
TOKEN: {
< LBRACKET: "[" >
}
TOKEN: {
< RBRACKET: "]" >
}
TOKEN: {
< SEMICOLON: ";" >
}
TOKEN: {
< COMMA: "," >
}
TOKEN: {
< DOT: "." >
}
TOKEN: {
< ASSIGN: "=" >
}
TOKEN: {
< GT: ">" >
}
TOKEN: {
< LT: "<" >
}
TOKEN: {
< BANG: "!" >
}
TOKEN: {
< TILDE: "~" >
}
TOKEN: {
< HOOK: "?" >
}
TOKEN: {
< COLON: ":" >
}
TOKEN: {
< EQ: "==" >
}
TOKEN: {
< LE: "<=" >
}
TOKEN: {
< GE: ">=" >
}
TOKEN: {
< NE: "!=" >
}
TOKEN: {
< SC_OR: "||" >
}
TOKEN: {
< SC_AND: "&&" >
}
TOKEN: {
< INCR: "++" >
}
TOKEN: {
< DECR: "--" >
}
TOKEN: {
< PLUS: "+" >
}
TOKEN: {
< MINUS: "-" >
}
TOKEN: {
< STAR: "*" >
}
TOKEN: {
< SLASH: "/" >
}
TOKEN: {
< BIT_AND: "&" >
}
TOKEN: {
< BIT_OR: "|" >
}
TOKEN: {
< XOR: "^" >
}
TOKEN: {
< REM: "%" >
}
TOKEN: {
< LSHIFT: "<<" >
}
TOKEN: {
< RSIGNEDSHIFT: ">>" >
}
TOKEN: {
< RUNSIGNEDSHIFT: ">>>" >
}
TOKEN: {
< PLUSASSIGN: "+=" >
}
TOKEN: {
< MINUSASSIGN: "-=" >
}
TOKEN: {
< STARASSIGN: "*=" >
}
TOKEN: {
< SLASHASSIGN: "/=" >
}
TOKEN: {
< ANDASSIGN: "&=" >
}
TOKEN: {
< ORASSIGN: "|=" >
}
TOKEN: {
< XORASSIGN: "^=" >
}
TOKEN: {
< REMASSIGN: "%=" >
}
TOKEN: {
< LSHIFTASSIGN: "<<=" >
}
TOKEN: {
< RSIGNEDSHIFTASSIGN: ">>=" >
}
TOKEN: {
< RUNSIGNEDSHIFTASSIGN: ">>>=" >
}
